/*******************************************************************************
 * Copyright (c) 2008, 2017 itemis AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Michael Clay    - initial API and implementation (bug #277380)
 *    Fabian Steeg    - updates for current Xtext and minor tweaks
 *    Alexander NyÃŸen - fixed generation problems w.r.t. terminals (bug #429512)
 *                    - fixed problems resulting from non-optional subgraph names
 *                      and shadowing of IDs by CompassPt literals (bug #430132)
 *                    - completely refactored grammar to be more consistent to
 *                      Dot language definition (bug #451097)
 *                    - transferred CompassPt into terminal rule to realize case
 *                      insensitive keywords properly (bug #454626)
 *                    - refactored grammar to be unambiguous (not relying on
 *                      backtracking)
 *                    - integration of HTML-string terminals (bug #321775)
 *                    - introduction of ID for terminals (bug #507413)
 *     Tamas Miklossy - modify grammar to allow empty attribute lists (bug #461506)
 *                    - modify grammar to allow compassPt as port name (bug #526814)
 *
 *******************************************************************************/


// This grammar for the DOT language is adopted from the Eclipse Graphical Editing Framework (GEF) project (https://projects.eclipse.org/projects/tools.gef)
// The original grammar file is available here:
// https://github.com/eclipse/gef/blob/master/org.eclipse.gef.dot/src/org/eclipse/gef/dot/internal/language/Dot.xtext


grammar eu.fbk.se.simpledg.SimpleDG with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)

generate simpleDG "http://www.fbk.eu/se/simpledg/SimpleDG"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://www.eclipse.org/gef/dot/internal/language/DotTerminals" as terminals

DotGraphs:
	(graphs+=DotGraph)*;


DotGraph:
	(strict?="strict")? type=GraphType (name=ID)? "{"
	(stmts+=Stmt)*
	"}";

	// XXX: We need to handle EdgeStmtSubgraph together with Subgraph, or the grammar would be ambiguous
Stmt:
	(NodeDefinition | EdgeDefinition | AttrStmt | Attribute | SubgraphOrEdgeStmtSubgraph) ";"?;

EdgeDefinition:
	node=NodeId (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*;

EdgeStmtSubgraph:
	subgraph=Subgraph (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*;

NodeDefinition:
	node=NodeId (attrLists+=AttrList)*;

AttrStmt:
	type=AttributeType (attrLists+=AttrList)+;

AttrList:
	{AttrList}
	"[" (attributes+=Attribute ("," | ";")?)* "]";

Attribute:
	name=ID "=" value=ID;

//	// XXX: We perform an assign action, so the parse tree is rewritten in case a subgraph is specified through an EdgeStmt
SubgraphOrEdgeStmtSubgraph:
	Subgraph ({EdgeStmtSubgraph.subgraph=current} (edgeRHS+=EdgeRhs)+ (attrLists+=AttrList)*)?;

Subgraph:
	{Subgraph} ("subgraph" (name=ID)?)? "{" (stmts+=Stmt)* "}";

Port:
	":" (=> compass_pt=COMPASS_PT |
			name=ID |
			name=ID ":" compass_pt=COMPASS_PT);

EdgeRhs:
	(EdgeRhsNode | EdgeRhsSubgraph);

EdgeRhsNode:
	op=EdgeOp node=NodeId;

EdgeRhsSubgraph:
	op=EdgeOp subgraph=Subgraph;

NodeId:
	name=ID (port=Port)?;



//	// XXX: While node, edge, graph, digraph, subgraph, and strict are keywords (and thus not allowed as part of an ID), compass point values are no keywords (and may thus be used as ID)
@Override
terminal ID:
	NUMERAL | 
	COMPASS_PT | 
	STRING | 
	QUOTED_STRING | 
	HTML_STRING 
	 ;

enum EdgeOp:
	directed="=>" | undirected="==";

enum GraphType:
	graph="graph" | digraph="digraph";

enum AttributeType:
	graph="graph" | node="node" | edge="edge";

terminal NUMERAL:
	('-')? ('.' ('0'..'9')+) | ('0'..'9')+ ('.' ('0'..'9')*)?;

	// XXX: While keywords are case insensitive, compass point values are not; we thus parse them as terminals
terminal COMPASS_PT:
	'n' | 'ne' | 'e' | 'se' | 's' | 'sw' | 'w' | 'nw' | 'c' | '_';

	// XXX: Any string of alphabetic ([a-zA-Z\200-\377]) characters, underscores ('_') or digits ([0-9]), not beginning with a digit;
@Override
terminal STRING:
	('a'..'z' | 'A'..'Z' | '\u0080'..'\u00FF' | '_') ('a'..'z' | 'A'..'Z' | '\u0080'..'\u00FF' | '_' | '0'..'9')*;
//
terminal QUOTED_STRING:
	('"' ('\\' '"' | !('"'))* '"');

terminal HTML_STRING : '<' (HTML_TAG_OPEN | HTML_TAG_CLOSE | HTML_CHARS)* '>';
terminal fragment HTML_TAG_OPEN : '<';
terminal fragment HTML_TAG_CLOSE : '>';
terminal fragment HTML_CHARS : (!('<'|'>'))+;

@Override 
terminal ML_COMMENT:
	'/*'->'*/';

@Override 
terminal SL_COMMENT:
	('//' | '#') !('\n' | '\r')* ('\r'? '\n')?;

@Override 
terminal WS:
	(' ' | '\t' | '\r' | '\n' | '\f')+;

@Override 
terminal ANY_OTHER:
	.;
