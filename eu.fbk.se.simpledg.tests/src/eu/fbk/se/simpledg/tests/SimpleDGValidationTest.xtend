/*
 * generated by Xtext 2.31.0
 */
package eu.fbk.se.simpledg.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import eu.fbk.se.simpledg.simpleDG.DotGraphs
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.xtext.validation.Issue
import java.util.List

@ExtendWith(InjectionExtension)
@InjectWith(SimpleDGInjectorProvider)
class SimpleDGValidationTest {
	@Inject
	ParseHelper<DotGraphs> parseHelper
	
	@Inject ValidationTestHelper validationTestHelper
	
	@Test
	def void validGraph() {
		val result = parseHelper.parse('''
			digraph {
				B -> A	
				A -> C
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val issues = validationTestHelper.validate(result) as List<Issue>
		Assertions.assertTrue(issues.size == 0)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void invalidGraph() {
		val result = parseHelper.parse('''
			digraph {
				B -> A	
				A -> C
				A -> D
				D -> F ["color"=red]
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val issues = validationTestHelper.validate(result) as List<Issue>
		Assertions.assertTrue(issues.size == 0)
	}
}
